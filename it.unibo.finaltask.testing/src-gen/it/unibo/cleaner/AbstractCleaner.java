/* Generated by AN DISI Unibo */ 
package it.unibo.cleaner;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractCleaner extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractCleaner(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/cleaner/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/cleaner/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitCleanKB",waitCleanKB);
	    	stateTab.put("cleanKBStatus",cleanKBStatus);
	    	stateTab.put("cleanKBMoves",cleanKBMoves);
	    	stateTab.put("cleanKBNextPositions",cleanKBNextPositions);
	    	stateTab.put("cleanKBMisc",cleanKBMisc);
	    	stateTab.put("waitStart",waitStart);
	    	stateTab.put("cleanPortion",cleanPortion);
	    	stateTab.put("waitMove",waitMove);
	    	stateTab.put("doMove",doMove);
	    	stateTab.put("registerObstacle",registerObstacle);
	    	stateTab.put("waitMoveCompletion",waitMoveCompletion);
	    	stateTab.put("recheckObstacles",recheckObstacles);
	    	stateTab.put("abortPlannedMoves",abortPlannedMoves);
	    	stateTab.put("stopClean",stopClean);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "cleaner tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	parg = "consult(\"./astar.pl\")";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//switchTo waitStart
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "waitStart",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitCleanKB = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitCleanKB",-1);
	    	String myselfName = "waitCleanKB";  
	    	temporaryStr = "cleanStop";
	    	addRule( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("cleanKBStatus") }, 
	          new String[]{"true","M","nextStep" },
	          36000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitCleanKB){  
	    	 println( getName() + " plan=waitCleanKB WARNING:" + e_waitCleanKB.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitCleanKB
	    
	    StateFun cleanKBStatus = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_cleanKBStatus",0);
	     pr.incNumIter(); 	
	    	String myselfName = "cleanKBStatus";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??status(cell(X,Y),S)" )) != null ){
	    	it.unibo.utils.misc.noOp( myself  );
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "doneCleaningKB";
	    	addRule( temporaryStr );  
	    	temporaryStr = "\"Cleaned KB (1/4)\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//switchTo cleanKBMoves
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "cleanKBMoves",true, false, " ??doneCleaningKB"); 
	    }catch(Exception e_cleanKBStatus){  
	    	 println( getName() + " plan=cleanKBStatus WARNING:" + e_cleanKBStatus.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleanKBStatus
	    
	    StateFun cleanKBMoves = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_cleanKBMoves",0);
	     pr.incNumIter(); 	
	    	String myselfName = "cleanKBMoves";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(A,pos(cell(X,Y),D))" )) != null ){
	    	it.unibo.utils.misc.noOp( myself  );
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "doneCleaningKB";
	    	addRule( temporaryStr );  
	    	temporaryStr = "\"Cleaned KB (2/4)\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//switchTo cleanKBNextPositions
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "cleanKBNextPositions",true, false, " ??doneCleaningKB"); 
	    }catch(Exception e_cleanKBMoves){  
	    	 println( getName() + " plan=cleanKBMoves WARNING:" + e_cleanKBMoves.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleanKBMoves
	    
	    StateFun cleanKBNextPositions = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_cleanKBNextPositions",0);
	     pr.incNumIter(); 	
	    	String myselfName = "cleanKBNextPositions";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??nextPos(pos(cell(X,Y),D))" )) != null ){
	    	it.unibo.utils.misc.noOp( myself  );
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "doneCleaningKB";
	    	addRule( temporaryStr );  
	    	temporaryStr = "\"Cleaned KB (3/4)\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//switchTo cleanKBMisc
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "cleanKBMisc",true, false, " ??doneCleaningKB"); 
	    }catch(Exception e_cleanKBNextPositions){  
	    	 println( getName() + " plan=cleanKBNextPositions WARNING:" + e_cleanKBNextPositions.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleanKBNextPositions
	    
	    StateFun cleanKBMisc = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("cleanKBMisc",-1);
	    	String myselfName = "cleanKBMisc";  
	    	temporaryStr = "overrideCleanStatus";
	    	removeRule( temporaryStr );  
	    	temporaryStr = "ignoreSonar";
	    	removeRule( temporaryStr );  
	    	temporaryStr = "cleanStop";
	    	removeRule( temporaryStr );  
	    	temporaryStr = "\"Cleaned KB (4/4)\"";
	    	println( temporaryStr );  
	    	//switchTo waitStart
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "waitStart",false, false, null); 
	    }catch(Exception e_cleanKBMisc){  
	    	 println( getName() + " plan=cleanKBMisc WARNING:" + e_cleanKBMisc.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleanKBMisc
	    
	    StateFun waitStart = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitStart",-1);
	    	String myselfName = "waitStart";  
	    	parg = "loadStatus";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "loadInitialPosition";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "visitCurrent";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"Auto cleaner ready to start...\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("cleanPortion") }, 
	          new String[]{"true","M","startAutoClean" },
	          36000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitStart){  
	    	 println( getName() + " plan=waitStart WARNING:" + e_waitStart.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitStart
	    
	    StateFun cleanPortion = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("cleanPortion",-1);
	    	String myselfName = "cleanPortion";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?findMove(L)" )) != null ){
	    	parg = "registerMoves(L)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	else{ {//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?fullyExplored" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"Cannot reach the goal due to obstacles\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"stopAutoClean(X)","stopAutoClean(true)", guardVars ).toString();
	    	sendMsg("stopAutoClean",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?status(cell(_,_),t)" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"Re-checking detected obstacle to see if they've gone away\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveFinished(X)","moveFinished(rechecks)", guardVars ).toString();
	    	sendMsg("moveFinished",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "\"Ignoring some parts of the room due to obstacles, going to the end point\"";
	    	println( temporaryStr );  
	    	temporaryStr = "overrideCleanStatus";
	    	addRule( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"retryAutoClean(X)","retryAutoClean(true)", guardVars ).toString();
	    	sendMsg("retryAutoClean",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}};//actionseq
	    	}};//actionseq
	    	}if( (guardVars = QActorUtils.evalTheGuard(this, " !?move(_,_)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"startAutoClean(X)","startAutoClean(true)", guardVars ).toString();
	    	sendMsg("startAutoClean",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	temporaryStr = "\"---------------------\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitCleanKB"), stateTab.get("cleanPortion"), stateTab.get("waitMove"), stateTab.get("recheckObstacles") }, 
	          new String[]{"true","M","stopAutoClean", "true","M","retryAutoClean", "true","M","startAutoClean", "true","M","moveFinished" },
	          1, "stopClean" );//msgTransition
	    }catch(Exception e_cleanPortion){  
	    	 println( getName() + " plan=cleanPortion WARNING:" + e_cleanPortion.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleanPortion
	    
	    StateFun waitMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitMove",-1);
	    	String myselfName = "waitMove";  
	    	temporaryStr = "ignoreSonar";
	    	removeRule( temporaryStr );  
	    	parg = "actualizeNext";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("doMove"), stateTab.get("waitCleanKB") }, 
	          new String[]{"true","M","nextStep", "true","M","stopAutoClean" },
	          36000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitMove){  
	    	 println( getName() + " plan=waitMove WARNING:" + e_waitMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitMove
	    
	    StateFun doMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doMove",-1);
	    	String myselfName = "doMove";  
	    	parg = "printStatus";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	it.unibo.cleaner.cleanerTimer.startTimer( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?move(A,_)" )) != null ){
	    	temporaryStr = "moveRobot(A)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveFinished(X)","moveFinished(true)", guardVars ).toString();
	    	sendMsg("moveFinished",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}if( (guardVars = QActorUtils.evalTheGuard(this, " !?executingRotation" )) != null ){
	    	temporaryStr = "ignoreSonar";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(_,T)" )) != null ){
	    	parg = "registerNext(T)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	temporaryStr = "\"---------------------\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitCleanKB"), stateTab.get("stopClean"), stateTab.get("registerObstacle") }, 
	          new String[]{"true","M","stopAutoClean", "true","M","moveFinished", "true","E","sonarDetect" },
	          201, "waitMove" );//msgTransition
	    }catch(Exception e_doMove){  
	    	 println( getName() + " plan=doMove WARNING:" + e_doMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doMove
	    
	    StateFun registerObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("registerObstacle",-1);
	    	String myselfName = "registerObstacle";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??ignoreSonar" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveFinished(X)","moveFinished(waiting)", guardVars ).toString();
	    	sendMsg("moveFinished",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ {//actionseq
	    	it.unibo.cleaner.cleanerTimer.stopTimer( myself  );
	    	temporaryStr = "\"Frontal obstacle detected, stepping back...\"";
	    	println( temporaryStr );  
	    	parg = "nextIsObstacle";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "printStatus";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??timeMoved(T)" )) != null ){
	    	temporaryStr = "moveRobot(s(T))";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	temporaryStr = "\"---------------------\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitCleanKB"), stateTab.get("waitMoveCompletion") }, 
	          new String[]{"true","M","stopAutoClean", "true","M","moveFinished" },
	          201, "abortPlannedMoves" );//msgTransition
	    }catch(Exception e_registerObstacle){  
	    	 println( getName() + " plan=registerObstacle WARNING:" + e_registerObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//registerObstacle
	    
	    StateFun waitMoveCompletion = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitMoveCompletion",-1);
	    	String myselfName = "waitMoveCompletion";  
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitCleanKB") }, 
	          new String[]{"true","M","stopAutoClean" },
	          201, "waitMove" );//msgTransition
	    }catch(Exception e_waitMoveCompletion){  
	    	 println( getName() + " plan=waitMoveCompletion WARNING:" + e_waitMoveCompletion.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitMoveCompletion
	    
	    StateFun recheckObstacles = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_recheckObstacles",0);
	     pr.incNumIter(); 	
	    	String myselfName = "recheckObstacles";  
	    	parg = "recheck(cell(X,Y))";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?status(cell(_,_),t)" )) != null )
	    	{
	    	temporaryStr = "recheckObstacles";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	//switchTo cleanPortion
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "cleanPortion",true, false, " ??recheckObstacles"); 
	    }catch(Exception e_recheckObstacles){  
	    	 println( getName() + " plan=recheckObstacles WARNING:" + e_recheckObstacles.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//recheckObstacles
	    
	    StateFun abortPlannedMoves = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_abortPlannedMoves",0);
	     pr.incNumIter(); 	
	    	String myselfName = "abortPlannedMoves";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(A,pos(cell(X,Y),D))" )) != null ){
	    	it.unibo.utils.misc.noOp( myself  );
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "doneCleaningKB";
	    	addRule( temporaryStr );  
	    	temporaryStr = "\"Cleaned planned moves\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//switchTo stopClean
	        switchToPlanAsNextState(pr, myselfName, "cleaner_"+myselfName, 
	              "stopClean",true, false, " ??doneCleaningKB"); 
	    }catch(Exception e_abortPlannedMoves){  
	    	 println( getName() + " plan=abortPlannedMoves WARNING:" + e_abortPlannedMoves.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//abortPlannedMoves
	    
	    StateFun stopClean = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stopClean",-1);
	    	String myselfName = "stopClean";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?jobDone" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"Room is now clean!\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"stopAutoClean(X)","stopAutoClean(true)", guardVars ).toString();
	    	sendMsg("stopAutoClean",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "\"Cleaned a portion of the room!\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveFinished(X)","moveFinished(true)", guardVars ).toString();
	    	sendMsg("moveFinished",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"cleaner_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitCleanKB"), stateTab.get("cleanPortion") }, 
	          new String[]{"true","M","stopAutoClean", "true","M","moveFinished" },
	          36000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_stopClean){  
	    	 println( getName() + " plan=stopClean WARNING:" + e_stopClean.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stopClean
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
