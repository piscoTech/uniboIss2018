// Model after the requirement analysis
System finalSys2018

Event usercmd		: usercmd(CMD)					// From web gui
Event sonar			: sonar(SONAR, X, DISTANCE)		// From (virtual) sonar
Event sonarDetect	: sonarDetect(X)					// From (virtual) robot sonar

Dispatch moveRobot	: moveRobot(X)
Dispatch ctrlAppl	: ctrlAppl(X)					// X = go | halt

Event ctrlEvent		: ctrlEvent(TARGET, PAYLOAD)
Dispatch ctrlMsg		: ctrlMsg(TARGET, PAYLOAD)
Event sensorEvent	: sensorEvent(ORIGIN, PAYLOAD)
Event lampEvent		: lampEvent(VERB, INFO)			// Feedback for controlling the real lamp

// Interaction with the actor controlling the automatic cleaning
Dispatch moveFinished 	: moveFinished(X)
Dispatch startAutoClean	: startAutoClean(X)
Dispatch stopAutoClean	: stopAutoClean(X)
Dispatch waitAutoClean	: waitAutoClean(X)

pubSubServer "tcp://localhost:1883"

Context ctxFinalSysAnalysis ip [host="localhost" port=8010]

QActor guitranslator context ctxFinalSysAnalysis -pubsub {
	Plan init normal [
		// This actor replaces the event handler to avoid a bug in the QActor system that could lead to event loss
	]
	transition stopAfter 36000000
		whenEvent usercmd -> translate
	finally repeatPlan
	
	Plan translate resumeLastPlan [
		onEvent usercmd : usercmd( robotgui(X) ) -> forward robot -m moveRobot : moveRobot(X)
	]
}

QActor webguiexecutor context ctxFinalSysAnalysis -pubsub {
	Rules {
		tempThreshold(25).			// 25°C
		timeInterval(32400, 39600).	// 9:00:00 - 11:00:00
		sonarThreshold(5).
		
		model(thermometer, 20).	// 20°C
		model(clock, 36300). 	// 10:05:00
		model(blinker, off).
		
		validConditions :-
			model(thermometer, T), model(clock, H), tempThreshold(Tmax), timeInterval(Hmin, Hmax),
			eval(le, T, Tmax), eval(ge, H, Hmin), eval(le, H, Hmax).
			
		inFrontOfSonar :- sonarThreshold(Dmax),
			curSonarDistance(D), eval(le, D, Dmax).		
 		
		changedModelAction(thermometer, _) :- validConditions, !. 
		changedModelAction(thermometer, _) :- sendMsg(webguiexecutor, ctrlAppl, ctrlAppl(halt)).
		
		changedModelAction(clock, _) :- validConditions, !. 
		changedModelAction(clock, _) :- sendMsg(webguiexecutor, ctrlAppl, ctrlAppl(halt)).
					     
		changedModelAction(blinker, V) :- sendMsg(blinker, ctrlMsg, ctrlMsg(blinker, V)).
	}
	
	Plan init normal [
		demo consult('./resourceModel.pl');
		println("Application ready")
	]
	switchTo listen
	
	Plan listen [] transition stopAfter 3600000
		whenMsg ctrlAppl -> startLogic,
		whenEvent sensorEvent -> handleSensor
	finally repeatPlan
		
	Plan startLogic resumeLastPlan [
		[!? validConditions] {
			onMsg ctrlAppl : ctrlAppl(go) -> addRule shouldStart
		} else
			println("Sensors conditions invalid, cannot clean")
	]
	switchTo [?? shouldStart] checkInitialPosition
	
	Plan checkInitialPosition resumeLastPlan [
		println("Sensors conditions are valid, checking initial position...")
	]
	transition
		whenTime 1000 -> listen,
		whenEvent sonar -> checkInitialSonarDistance
		
	Plan checkInitialSonarDistance resumeLastPlan [
		removeRule curSonarDistance(D);
		onEvent sonar : sonar(sonar1, player, D) -> addRule curSonarDistance(D)
	]
	switchTo [!? inFrontOfSonar] startCleaning
			
	Plan startCleaning [
		println("Application started...");
		demo changeModelItem(blinker, on);
		forward cleaner -m startAutoClean : startAutoClean(true)
	]
	switchTo clean
	
	Plan clean [] transition stopAfter 36000
		whenEvent sensorEvent -> handleSensor,
		whenMsg ctrlAppl -> checkStop,
		whenMsg stopAutoClean -> cleanStop // Clean signaled completion of operations
	finally repeatPlan
	
	Plan checkStop resumeLastPlan [
		onMsg ctrlAppl : ctrlAppl(halt) -> addRule shouldStop
	]
	switchTo [?? shouldStop] cleanStop
	
	Plan cleanStop [
		demo changeModelItem(blinker, off);
		forward cleaner -m stopAutoClean : stopAutoClean(true);
		forward robot -m moveRobot : moveRobot(h);
		println("Application stopped.")
	]
	switchTo listen
	
	Plan handleSensor resumeLastPlan [
		// O = thermometer	=> P = real number representing the current temperature
		// O = clock 		=> P = positive integer representing the number of seconds from midnight (00:00:00 = 0, 23:59:59 = 86399, 10:05:06 = 10*3600 + 5*60 + 6)
		onEvent sensorEvent : sensorEvent(O, P) -> demo changeModelItem(O, P)
	]
	switchTo [not !? validConditions] cleanStop
}

QActor cleaner context ctxFinalSysAnalysis -pubsub {
	Rules {
		defaultPosition(pos(cell(0,0), n)).
		size(5,5).
		tileSize(350).
	}
	
	Plan init normal [
		demo consult('./astar.pl')
	]
	switchTo waitStart
	
	Plan cleanStatus [
		[?? status(cell(X,Y), S)]
			println("Cleaning...")
		else
			addRule doneCleaning
	]
	switchTo [?? doneCleaning] waitStart
	finally repeatPlan
	
	Plan waitStart [
		[!? status(cell(X,Y), S)] println("Clean failed!!!"); // Should never happen, if so something went wrong
		demo loadStatus;
		demo loadInitialPosition;
		demo visitCurrent;
		
		println("Auto cleaner ready to start...")
	]
	transition stopAfter 36000000
		whenMsg startAutoClean -> cleanPortion
	
	Plan cleanPortion [
		[!? findMove(L)]
			demo registerMoves(L)
		else {
			println("Cannot reach the goal due to obstacles");
			selfMsg waitAutoClean : waitAutoClean(true);
			forward webguiexecutor -m stopAutoClean : stopAutoClean(true)
		};
		
		[!? move(_, _)] selfMsg startAutoClean : startAutoClean(true);
		println("---------------------")
	]
	transition stopAfter 36000000
		whenMsg waitAutoClean -> cleanStatus,
		whenMsg startAutoClean -> doMove
	
	Plan doMove [
		demo actualizeNext;
		demo printStatus;
		
		[!? move(A, _)]
			forward robot -m moveRobot : moveRobot(A)
		else
			selfMsg moveFinished : moveFinished(true);
		[?? move(_, T)] demo registerNext(T);
		
		println("---------------------")
	] transition
		whenTime 400 -> doMove,
		whenMsg moveFinished -> stopClean,
		whenMsg stopAutoClean -> cleanStatus
		
	Plan stopClean [
		[!? jobDone] {
			println("Room is now clean!");
			selfMsg waitAutoClean : waitAutoClean(true);
			forward webguiexecutor -m stopAutoClean : stopAutoClean(true)
		} else {
			println("Cleaned a portion of the room!");
			selfMsg moveFinished : moveFinished(true)
		}
	]
	transition stopAfter 360000
		whenMsg waitAutoClean -> cleanStatus,
		whenMsg moveFinished -> cleanPortion
}

QActor blinker context ctxFinalSysAnalysis -pubsub {
	Plan init normal [
		println("Blinker ready...")
	]
	switchTo listen
	
	Plan listen [] transition stopAfter 3600000
		whenMsg ctrlMsg -> checkStart
	finally repeatPlan	
	
	Plan checkStart resumeLastPlan [
		onMsg ctrlMsg : ctrlMsg(blinker, on) -> addRule shouldBlink
	]
	switchTo [?? shouldBlink] blinkOn
	
	Plan blinkOn [
		emit ctrlEvent : ctrlEvent(hueLamp, on)
	] transition
		whenTime 1000 -> blinkOff,
		whenMsg ctrlMsg -> checkEnd
	finally repeatPlan
		
	Plan blinkOff [
		emit ctrlEvent : ctrlEvent(hueLamp, off)
	] transition
		whenTime 1000 -> blinkOn,
		whenMsg ctrlMsg -> checkEnd
	finally repeatPlan
		
	Plan checkEnd resumeLastPlan [
		onMsg ctrlMsg : ctrlMsg(blinker, off) -> addRule shouldStop
	]
	switchTo [?? shouldStop] blinkStop
	
	Plan blinkStop [
		emit ctrlEvent : ctrlEvent(hueLamp, off)
	]
	switchTo listen
}

QActor robot context ctxFinalSysAnalysis -pubsub {
	Plan init normal [
		println("Robot started");
		javaRun it.unibo.robot.pfrs.mbotConnTcp.initClientConn()
	]
	switchTo listen
	
	Plan listen [] transition stopAfter 3600000
		whenMsg moveRobot -> execMove
	finally repeatPlan
		
	Plan execMove resumeLastPlan [
		onMsg moveRobot : moveRobot(h)		-> javaRun it.unibo.robot.pfrs.mbotConnTcp.mbotStop();
		onMsg moveRobot : moveRobot(w(X))	-> javaRun it.unibo.robot.pfrs.mbotConnTcp.mbotForward(X);
		onMsg moveRobot : moveRobot(s(X))	-> javaRun it.unibo.robot.pfrs.mbotConnTcp.mbotBackward(X);
		onMsg moveRobot : moveRobot(a)		-> javaRun it.unibo.robot.pfrs.mbotConnTcp.mbotLeft();
		onMsg moveRobot : moveRobot(d)		-> javaRun it.unibo.robot.pfrs.mbotConnTcp.mbotRight();
		onMsg moveRobot : moveRobot(x(X))	-> forward webguiexecutor -m ctrlAppl : ctrlAppl(X)
	]
}

QActor lampadapter context ctxFinalSysAnalysis -pubsub {
	Rules {
		//enabled.
	}
	
	Plan init normal [
		println("Lamp Adapter started");
		javaRun it.unibo.frontend.hueClient.setQaCtx("lampEvent")
	]
	switchTo listen
	
	Plan listen [] transition stopAfter 3600000
		whenEvent ctrlEvent -> ctrlLamp
	finally repeatPlan
	
	Plan ctrlLamp resumeLastPlan [
		[!? enabled] {
			onEvent ctrlEvent : ctrlEvent(hueLamp,off)
				-> javaRun it.unibo.frontend.hueClient.sendPut("{'on':false}", "lights/2/state");
			onEvent ctrlEvent : ctrlEvent(hueLamp,on)
				-> javaRun it.unibo.frontend.hueClient.sendPut("{'on':true, 'bri':167}", "lights/2/state")
		}
	]
}
