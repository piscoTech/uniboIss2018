/* Generated by AN DISI Unibo */ 
package it.unibo.webguiexecutor;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractWebguiexecutor extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractWebguiexecutor(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/webguiexecutor/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/webguiexecutor/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("listen",listen);
	    	stateTab.put("startLogic",startLogic);
	    	stateTab.put("clean",clean);
	    	stateTab.put("printEv",printEv);
	    	stateTab.put("handleSensor",handleSensor);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "webguiexecutor tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	parg = "consult(\"./resourceModel.pl\")";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"Application ready\"";
	    	println( temporaryStr );  
	     connectToMqttServer("tcp://localhost:1883");
	    	//switchTo listen
	        switchToPlanAsNextState(pr, myselfName, "webguiexecutor_"+myselfName, 
	              "listen",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun listen = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_listen",0);
	     pr.incNumIter(); 	
	    	String myselfName = "listen";  
	    	//bbb
	     msgTransition( pr,myselfName,"webguiexecutor_"+myselfName,false,
	          new StateFun[]{stateTab.get("startLogic"), stateTab.get("printEv"), stateTab.get("printEv"), stateTab.get("handleSensor") }, 
	          new String[]{"true","M","startAppl", "true","E","sonar", "true","E","sonarDetect", "true","E","sensorEvent" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_listen){  
	    	 println( getName() + " plan=listen WARNING:" + e_listen.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//listen
	    
	    StateFun startLogic = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("startLogic",-1);
	    	String myselfName = "startLogic";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("startAppl(go)");
	    	if( currentMessage != null && currentMessage.msgId().equals("startAppl") && 
	    		pengine.unify(curT, Term.createTerm("startAppl(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="shouldStart";
	    		/* AddRule */
	    		parg = updateVars(Term.createTerm("startAppl(X)"),  Term.createTerm("startAppl(go)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//switchTo clean
	        switchToPlanAsNextState(pr, myselfName, "webguiexecutor_"+myselfName, 
	              "clean",false, true, " ??shouldStart"); 
	    }catch(Exception e_startLogic){  
	    	 println( getName() + " plan=startLogic WARNING:" + e_startLogic.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//startLogic
	    
	    StateFun clean = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("clean",-1);
	    	String myselfName = "clean";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?validConditions" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"Application started...\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "clean";
	    	if( ! aar.getGoon() ) return ;
	    	parg = "changeModelItem(hueLamp,on)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(2000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "clean";
	    	if( ! aar.getGoon() ) return ;
	    	parg = "changeModelItem(hueLamp,off)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"Application done!\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	else{ temporaryStr = "\"Sensors conditions invalid, cannot start\"";
	    	println( temporaryStr );  
	    	}
	    	//switchTo listen
	        switchToPlanAsNextState(pr, myselfName, "webguiexecutor_"+myselfName, 
	              "listen",false, false, null); 
	    }catch(Exception e_clean){  
	    	 println( getName() + " plan=clean WARNING:" + e_clean.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//clean
	    
	    StateFun printEv = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("printEv",-1);
	    	String myselfName = "printEv";  
	    	printCurrentEvent(false);
	    	repeatPlanNoTransition(pr,myselfName,"webguiexecutor_"+myselfName,false,true);
	    }catch(Exception e_printEv){  
	    	 println( getName() + " plan=printEv WARNING:" + e_printEv.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//printEv
	    
	    StateFun handleSensor = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleSensor",-1);
	    	String myselfName = "handleSensor";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sensorEvent(O,P)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sensorEvent") && 
	    		pengine.unify(curT, Term.createTerm("sensorEvent(ORIGIN,PAYLOAD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="changeModelItem(O,P)";
	    			/* PHead */
	    			parg =  updateVars( Term.createTerm("sensorEvent(ORIGIN,PAYLOAD)"), 
	    			                    Term.createTerm("sensorEvent(O,P)"), 
	    				    		  	Term.createTerm(currentEvent.getMsg()), parg);
	    				if( parg != null ) {
	    				    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    					//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    					if( aar.getInterrupted() ){
	    						curPlanInExec   = "handleSensor";
	    						if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    						if( ! aar.getGoon() ) return ;
	    					} 			
	    					if( aar.getResult().equals("failure")){
	    						if( ! aar.getGoon() ) return ;
	    					}else if( ! aar.getGoon() ) return ;
	    				}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"webguiexecutor_"+myselfName,false,true);
	    }catch(Exception e_handleSensor){  
	    	 println( getName() + " plan=handleSensor WARNING:" + e_handleSensor.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleSensor
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
