/* Generated by AN DISI Unibo */ 
package it.unibo.astar;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractAstar extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractAstar(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/astar/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/astar/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitStart",waitStart);
	    	stateTab.put("cleanPortion",cleanPortion);
	    	stateTab.put("doMove",doMove);
	    	stateTab.put("stopClean",stopClean);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "astar tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	parg = "consult(\"./astar.pl\")";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//switchTo waitStart
	        switchToPlanAsNextState(pr, myselfName, "astar_"+myselfName, 
	              "waitStart",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitStart = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitStart",-1);
	    	String myselfName = "waitStart";  
	    	parg = "cleanStatus";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "loadStatus";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "loadInitialPosition";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "visitCurrent";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//switchTo cleanPortion
	        switchToPlanAsNextState(pr, myselfName, "astar_"+myselfName, 
	              "cleanPortion",false, false, null); 
	    }catch(Exception e_waitStart){  
	    	 println( getName() + " plan=waitStart WARNING:" + e_waitStart.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitStart
	    
	    StateFun cleanPortion = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("cleanPortion",-1);
	    	String myselfName = "cleanPortion";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?findMove(L)" )) != null ){
	    	parg = "registerMoves(L)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	else{ temporaryStr = "\"Cannot reach the goal due to obstacles\"";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}temporaryStr = "\"---------------------\"";
	    	println( temporaryStr );  
	    	//switchTo doMove
	        switchToPlanAsNextState(pr, myselfName, "astar_"+myselfName, 
	              "doMove",false, false, " !?move(_,_)"); 
	    }catch(Exception e_cleanPortion){  
	    	 println( getName() + " plan=cleanPortion WARNING:" + e_cleanPortion.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleanPortion
	    
	    StateFun doMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doMove",-1);
	    	String myselfName = "doMove";  
	    	parg = "actualizeNext";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	parg = "printStatus";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?move(A,_)" )) != null ){
	    	temporaryStr = "A";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveFinished(X)","moveFinished(true)", guardVars ).toString();
	    	sendMsg("moveFinished",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(_,T)" )) != null ){
	    	parg = "registerNext(T)";
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	}
	    	temporaryStr = "\"---------------------\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"astar_"+myselfName,false,
	          new StateFun[]{stateTab.get("stopClean") }, 
	          new String[]{"true","M","moveFinished" },
	          200, "doMove" );//msgTransition
	    }catch(Exception e_doMove){  
	    	 println( getName() + " plan=doMove WARNING:" + e_doMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doMove
	    
	    StateFun stopClean = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stopClean",-1);
	    	String myselfName = "stopClean";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?jobDone" )) != null ){
	    	println( "Room is now clean!" );
	    	pr.terminate(); 
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "\"Cleaned a portion of the room!\"";
	    	println( temporaryStr );  
	    	temporaryStr = "cleanMore";
	    	addRule( temporaryStr );  
	    	};//actionseq
	    	}
	    	//switchTo cleanPortion
	        switchToPlanAsNextState(pr, myselfName, "astar_"+myselfName, 
	              "cleanPortion",false, false, " ??cleanMore"); 
	    }catch(Exception e_stopClean){  
	    	 println( getName() + " plan=stopClean WARNING:" + e_stopClean.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stopClean
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
